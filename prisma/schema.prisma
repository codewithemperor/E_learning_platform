// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      UserRole
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  studentProfile  Student?
  teacherProfile  Teacher?
  adminProfile    Admin?
  fileUploads     FileUpload[]
  enrollments     Enrollment[]
  teacherSubjects TeacherSubject[]

  @@map("users")
}

model Student {
  id          String @id @default(cuid())
  userId      String @unique
  studentId   String @unique
  departmentId String
  courseId    String
  year        Int
  semester    Int

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  department Department @relation(fields: [departmentId], references: [id])
  course     Course     @relation(fields: [courseId], references: [id])

  @@map("students")
}

model Teacher {
  id        String @id @default(cuid())
  userId    String @unique
  teacherId String @unique
  departmentId String

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  department Department @relation(fields: [departmentId], references: [id])

  @@map("teachers")
}

model Admin {
  id     String @id @default(cuid())
  userId String @unique

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("admins")
}

model Department {
  id          String @id @default(cuid())
  name        String @unique
  code        String @unique
  description String?

  students  Student[]
  teachers  Teacher[]
  courses   Course[]

  @@map("departments")
}

model Course {
  id           String @id @default(cuid())
  name         String
  code         String @unique
  departmentId String
  description  String?
  duration     Int // in years

  department Department @relation(fields: [departmentId], references: [id])
  subjects  Subject[]
  students  Student[]

  @@map("courses")
}

model Subject {
  id        String @id @default(cuid())
  name      String
  code      String @unique
  courseId  String
  semester  Int
  description String?

  course   Course             @relation(fields: [courseId], references: [id])
  teachers TeacherSubject[]
  files    SubjectFile[]
  enrollments Enrollment[]

  @@map("subjects")
}

model TeacherSubject {
  id        String @id @default(cuid())
  teacherId String
  subjectId String
  classCode String @unique

  teacher User    @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  subject Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@unique([teacherId, subjectId])
  @@map("teacher_subjects")
}

model Enrollment {
  id         String @id @default(cuid())
  studentId  String
  subjectId  String
  enrolledAt DateTime @default(now())

  student User    @relation(fields: [studentId], references: [id], onDelete: Cascade)
  subject Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@unique([studentId, subjectId])
  @@map("enrollments")
}

model FileUpload {
  id          String @id @default(cuid())
  filename    String
  originalName String
  fileSize    Int
  mimeType    String
  cloudinaryUrl String?
  cloudinaryPublicId String?
  uploadedBy  String
  uploadedAt  DateTime @default(now())

  user User @relation(fields: [uploadedBy], references: [id], onDelete: Cascade)
  files SubjectFile[]

  @@map("file_uploads")
}

model SubjectFile {
  id          String @id @default(cuid())
  subjectId   String
  fileUploadId String
  title       String
  description String?
  uploadedAt  DateTime @default(now())

  subject   Subject     @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  fileUpload FileUpload @relation(fields: [fileUploadId], references: [id], onDelete: Cascade)

  @@map("subject_files")
}

enum UserRole {
  ADMIN
  TEACHER
  STUDENT
}